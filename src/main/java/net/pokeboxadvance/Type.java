package net.pokeboxadvance;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import net.pokeboxadvance.gamemasterparser.DelimitedWritable;
import net.pokeboxadvance.gamemasterparser.ECMAScriptWritable;
import net.pokeboxadvance.gamemasterparser.Format;
import net.pokeboxadvance.gamemasterparser.Named;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Pokemon type.
 *
 * Consists of a name and an id.
 *
 * @author AL4CR1TY
 * @version %I%
 * @since 2018-05-28
 */
public class Type implements DelimitedWritable, ECMAScriptWritable, Named {

  private static final String
      NAME_IDENTIFIER_NEUTRAL = "Neutral",
      NAME_IDENTIFIER_NORMAL = "Normal",
      NAME_IDENTIFIER_FIRE = "Fire",
      NAME_IDENTIFIER_WATER = "Water",
      NAME_IDENTIFIER_ELECTRIC = "Electric",
      NAME_IDENTIFIER_GRASS = "Grass",
      NAME_IDENTIFIER_ICE = "Ice",
      NAME_IDENTIFIER_FIGHTING = "Fighting",
      NAME_IDENTIFIER_POISON = "Poison",
      NAME_IDENTIFIER_GROUND = "Ground",
      NAME_IDENTIFIER_FLYING = "Flying",
      NAME_IDENTIFIER_PSYCHIC = "Psychic",
      NAME_IDENTIFIER_BUG = "Bug",
      NAME_IDENTIFIER_ROCK = "Rock",
      NAME_IDENTIFIER_GHOST = "Ghost",
      NAME_IDENTIFIER_DRAGON = "Dragon",
      NAME_IDENTIFIER_DARK = "Dark",
      NAME_IDENTIFIER_STEEL = "Steel",
      NAME_IDENTIFIER_FAIRY = "Fairy";

  private static final String[] NAME_IDENTIFIERS = new String[]{
      NAME_IDENTIFIER_NEUTRAL,
      NAME_IDENTIFIER_NORMAL,
      NAME_IDENTIFIER_FIRE,
      NAME_IDENTIFIER_WATER,
      NAME_IDENTIFIER_ELECTRIC,
      NAME_IDENTIFIER_GRASS,
      NAME_IDENTIFIER_ICE,
      NAME_IDENTIFIER_FIGHTING,
      NAME_IDENTIFIER_POISON,
      NAME_IDENTIFIER_GROUND,
      NAME_IDENTIFIER_FLYING,
      NAME_IDENTIFIER_PSYCHIC,
      NAME_IDENTIFIER_BUG,
      NAME_IDENTIFIER_ROCK,
      NAME_IDENTIFIER_GHOST,
      NAME_IDENTIFIER_DRAGON,
      NAME_IDENTIFIER_DARK,
      NAME_IDENTIFIER_STEEL,
      NAME_IDENTIFIER_FAIRY
  };

  private static final String[] NAME_IDENTIFIERS_UPPERCASE = new String[]{
      NAME_IDENTIFIER_NEUTRAL.toUpperCase(),
      NAME_IDENTIFIER_NORMAL.toUpperCase(),
      NAME_IDENTIFIER_FIRE.toUpperCase(),
      NAME_IDENTIFIER_WATER.toUpperCase(),
      NAME_IDENTIFIER_ELECTRIC.toUpperCase(),
      NAME_IDENTIFIER_GRASS.toUpperCase(),
      NAME_IDENTIFIER_ICE.toUpperCase(),
      NAME_IDENTIFIER_FIGHTING.toUpperCase(),
      NAME_IDENTIFIER_POISON.toUpperCase(),
      NAME_IDENTIFIER_GROUND.toUpperCase(),
      NAME_IDENTIFIER_FLYING.toUpperCase(),
      NAME_IDENTIFIER_PSYCHIC.toUpperCase(),
      NAME_IDENTIFIER_BUG.toUpperCase(),
      NAME_IDENTIFIER_ROCK.toUpperCase(),
      NAME_IDENTIFIER_GHOST.toUpperCase(),
      NAME_IDENTIFIER_DRAGON.toUpperCase(),
      NAME_IDENTIFIER_DARK.toUpperCase(),
      NAME_IDENTIFIER_STEEL.toUpperCase(),
      NAME_IDENTIFIER_FAIRY.toUpperCase(),
      "POKEMON_TYPE_NEUTRAL",
      "POKEMON_TYPE_NORMAL",
      "POKEMON_TYPE_FIRE",
      "POKEMON_TYPE_WATER",
      "POKEMON_TYPE_ELECTRIC",
      "POKEMON_TYPE_GRASS",
      "POKEMON_TYPE_ICE",
      "POKEMON_TYPE_FIGHTING",
      "POKEMON_TYPE_POISON",
      "POKEMON_TYPE_GROUND",
      "POKEMON_TYPE_FLYING",
      "POKEMON_TYPE_PSYCHIC",
      "POKEMON_TYPE_BUG",
      "POKEMON_TYPE_ROCK",
      "POKEMON_TYPE_GHOST",
      "POKEMON_TYPE_DRAGON",
      "POKEMON_TYPE_DARK",
      "POKEMON_TYPE_STEEL",
      "POKEMON_TYPE_FAIRY"
  };

  public static final Type
      NEUTRAL = new Type(NAME_IDENTIFIER_NEUTRAL),
      NORMAL = new Type(NAME_IDENTIFIER_NORMAL),
      FIRE = new Type(NAME_IDENTIFIER_FIRE),
      WATER = new Type(NAME_IDENTIFIER_WATER),
      ELECTRIC = new Type(NAME_IDENTIFIER_ELECTRIC),
      GRASS = new Type(NAME_IDENTIFIER_GRASS),
      ICE = new Type(NAME_IDENTIFIER_ICE),
      FIGHTING = new Type(NAME_IDENTIFIER_FIGHTING),
      POISON = new Type(NAME_IDENTIFIER_POISON),
      GROUND = new Type(NAME_IDENTIFIER_GROUND),
      FLYING = new Type(NAME_IDENTIFIER_FLYING),
      PSYCHIC = new Type(NAME_IDENTIFIER_PSYCHIC),
      BUG = new Type(NAME_IDENTIFIER_BUG),
      ROCK = new Type(NAME_IDENTIFIER_ROCK),
      GHOST = new Type(NAME_IDENTIFIER_GHOST),
      DRAGON = new Type(NAME_IDENTIFIER_DRAGON),
      DARK = new Type(NAME_IDENTIFIER_DARK),
      STEEL = new Type(NAME_IDENTIFIER_STEEL),
      FAIRY = new Type(NAME_IDENTIFIER_FAIRY);

  public static final Type[] TYPES = new Type[]{NEUTRAL, NORMAL, FIRE, WATER, ELECTRIC, GRASS, ICE,
      FIGHTING, POISON, GROUND, FLYING, PSYCHIC, BUG, ROCK, GHOST, DRAGON, DARK, STEEL, FAIRY,
      NEUTRAL, NORMAL, FIRE, WATER, ELECTRIC, GRASS, ICE, FIGHTING, POISON, GROUND, FLYING, PSYCHIC,
      BUG, ROCK, GHOST, DRAGON, DARK, STEEL, FAIRY};

  public static final double
      NEUTRAL_DAMAGE = 1,
      IMMUNE = 0.51,
      NORMAL_DAMAGE = 1,
      SUPER_EFFECTIVE = 1.4,
      NOT_VERY_EFFECTIVE = 0.714;
  public final double[][] effectiveness = {
      {NEUTRAL_DAMAGE, NEUTRAL_DAMAGE, NEUTRAL_DAMAGE, NEUTRAL_DAMAGE, NEUTRAL_DAMAGE,
          NEUTRAL_DAMAGE, NEUTRAL_DAMAGE, NEUTRAL_DAMAGE, NEUTRAL_DAMAGE, NEUTRAL_DAMAGE,
          NEUTRAL_DAMAGE, NEUTRAL_DAMAGE, NEUTRAL_DAMAGE, NEUTRAL_DAMAGE, NEUTRAL_DAMAGE,
          NEUTRAL_DAMAGE, NEUTRAL_DAMAGE, NEUTRAL_DAMAGE, NEUTRAL_DAMAGE},
      {NEUTRAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, IMMUNE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NOT_VERY_EFFECTIVE, NORMAL_DAMAGE},
      {NEUTRAL_DAMAGE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE,
          SUPER_EFFECTIVE, SUPER_EFFECTIVE,
          NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          SUPER_EFFECTIVE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE,
          SUPER_EFFECTIVE, NORMAL_DAMAGE},
      {NEUTRAL_DAMAGE, NORMAL_DAMAGE, SUPER_EFFECTIVE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE,
          NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          SUPER_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, SUPER_EFFECTIVE,
          NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE},
      {NEUTRAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, SUPER_EFFECTIVE, NOT_VERY_EFFECTIVE,
          NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, IMMUNE,
          SUPER_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE},
      {NEUTRAL_DAMAGE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, SUPER_EFFECTIVE, NORMAL_DAMAGE,
          NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NOT_VERY_EFFECTIVE, SUPER_EFFECTIVE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE,
          NOT_VERY_EFFECTIVE,
          SUPER_EFFECTIVE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE,
          NORMAL_DAMAGE},
      {NEUTRAL_DAMAGE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE,
          SUPER_EFFECTIVE,
          NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE, SUPER_EFFECTIVE, SUPER_EFFECTIVE,
          NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          SUPER_EFFECTIVE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE},
      {NEUTRAL_DAMAGE, SUPER_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          SUPER_EFFECTIVE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE,
          NOT_VERY_EFFECTIVE, NOT_VERY_EFFECTIVE, NOT_VERY_EFFECTIVE, SUPER_EFFECTIVE, IMMUNE,
          NORMAL_DAMAGE, SUPER_EFFECTIVE, SUPER_EFFECTIVE, NOT_VERY_EFFECTIVE},
      //{NEUTRAL, SUPER_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, SUPER_EFFECTIVE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE, IMMUNE, SUPER_EFFECTIVE},
      {NEUTRAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, SUPER_EFFECTIVE,
          NORMAL_DAMAGE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE,
          NORMAL_DAMAGE,
          NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          IMMUNE, SUPER_EFFECTIVE},
      {NEUTRAL_DAMAGE, NORMAL_DAMAGE, SUPER_EFFECTIVE, NORMAL_DAMAGE, SUPER_EFFECTIVE,
          NOT_VERY_EFFECTIVE,
          NORMAL_DAMAGE, NORMAL_DAMAGE,
          SUPER_EFFECTIVE, NORMAL_DAMAGE, IMMUNE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE,
          SUPER_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          SUPER_EFFECTIVE, NORMAL_DAMAGE},
      {NEUTRAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE,
          SUPER_EFFECTIVE,
          NORMAL_DAMAGE, SUPER_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NORMAL_DAMAGE,
          SUPER_EFFECTIVE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NOT_VERY_EFFECTIVE, NORMAL_DAMAGE},
      {NEUTRAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NORMAL_DAMAGE, SUPER_EFFECTIVE, SUPER_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NOT_VERY_EFFECTIVE, NORMAL_DAMAGE,
          NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, IMMUNE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE},
      {NEUTRAL_DAMAGE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          SUPER_EFFECTIVE,
          NORMAL_DAMAGE, NOT_VERY_EFFECTIVE,
          NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, SUPER_EFFECTIVE, NORMAL_DAMAGE,
          NORMAL_DAMAGE, NOT_VERY_EFFECTIVE,
          NORMAL_DAMAGE, SUPER_EFFECTIVE, NOT_VERY_EFFECTIVE, NOT_VERY_EFFECTIVE},
      {NEUTRAL_DAMAGE, NORMAL_DAMAGE, SUPER_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          SUPER_EFFECTIVE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE,
          NOT_VERY_EFFECTIVE, SUPER_EFFECTIVE, NORMAL_DAMAGE, SUPER_EFFECTIVE, NORMAL_DAMAGE,
          NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NOT_VERY_EFFECTIVE, NORMAL_DAMAGE},
      {NEUTRAL_DAMAGE, IMMUNE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NORMAL_DAMAGE,
          NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, SUPER_EFFECTIVE,
          NORMAL_DAMAGE, NORMAL_DAMAGE, SUPER_EFFECTIVE, NORMAL_DAMAGE,
          NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE},
      {NEUTRAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, SUPER_EFFECTIVE, NORMAL_DAMAGE,
          NOT_VERY_EFFECTIVE, IMMUNE},
      {NEUTRAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          SUPER_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          SUPER_EFFECTIVE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE},
      {NEUTRAL_DAMAGE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, NOT_VERY_EFFECTIVE, NOT_VERY_EFFECTIVE,
          NORMAL_DAMAGE,
          SUPER_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NORMAL_DAMAGE, NORMAL_DAMAGE, SUPER_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NORMAL_DAMAGE, NOT_VERY_EFFECTIVE,
          SUPER_EFFECTIVE},
      {NEUTRAL_DAMAGE, NORMAL_DAMAGE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NORMAL_DAMAGE,
          NORMAL_DAMAGE, SUPER_EFFECTIVE, NOT_VERY_EFFECTIVE, NORMAL_DAMAGE, NORMAL_DAMAGE,
          NORMAL_DAMAGE,
          NORMAL_DAMAGE, NORMAL_DAMAGE, NORMAL_DAMAGE, SUPER_EFFECTIVE, SUPER_EFFECTIVE,
          NOT_VERY_EFFECTIVE, NORMAL_DAMAGE}
  },
      effectiveness_transposed = transpose(effectiveness);

  private static double[][] transpose(double[][] array) {
    if (array.length == 0 || array[0].length == 0) {
      return new double[0][0];
    }
    double[][] transposed = new double[array[0].length][array.length];
    for (int i = 0; i < array.length; i++) {
      for (int j = 0; j < array[0].length; j++) {
        transposed[j][i] = array[i][j];
      }
    }
    return transposed;
  }

  private int id;
  private String name;
  private double[] attackEffectiveness;
  private double[] defenseEffectiveness;

  public static Type get(String typeName) {
    int index = Arrays.asList(NAME_IDENTIFIERS_UPPERCASE).indexOf(typeName.toUpperCase());
    if (index < 0 || index >= TYPES.length) {
      return null;
    }
    return TYPES[index];
  }

  private Type(String typeName) {
    int index = Arrays.asList(NAME_IDENTIFIERS_UPPERCASE).indexOf(typeName.toUpperCase());
    if (index < 0 || index >= NAME_IDENTIFIERS.length) {
      return;
    }
    this.id = index;
    this.name = NAME_IDENTIFIERS[index];
    this.attackEffectiveness = effectiveness[index];
    this.defenseEffectiveness = effectiveness_transposed[index];
  }

  public int getId() {
    return id;
  }

  public String getName() {
    return name;
  }

  @Override
  public String toDelimited(char delimiter) {
    return null;
  }

  @Override
  public String toECMAScriptDef() {
    Map<String, Object> map = new HashMap<>();
    map.put("id", this.id);
    map.put("name", this.name);
    map.put("attackEffectiveness", this.attackEffectiveness);
    map.put("defenseEffectiveness", this.defenseEffectiveness);
    return Format.toECMAScriptObject(map);
  }

  @Override
  public String toECMAScriptCollectionDef() {
    return null;
  }

  @Override
  public String toJSON() {
    return null;
  }

  @Override
  public String toString() {
    return this.name.toUpperCase();
  }
}
